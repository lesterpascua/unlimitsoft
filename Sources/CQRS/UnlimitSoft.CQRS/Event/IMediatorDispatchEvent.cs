using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using UnlimitSoft.Event;

namespace UnlimitSoft.CQRS.Event;


/// <summary>
/// Used as proxy to store event generated by entities just before complete transaction
/// </summary>
public interface IMediatorDispatchEvent
{
    /// <summary>
    /// 
    /// </summary>
    /// <param name="entities"></param>
    /// <param name="ct"></param>
    /// <returns></returns>
    Task DispatchEventsAsync(IEnumerable<IEvent> entities, CancellationToken ct);
    /// <summary>
    /// When all event are saved invoqued this method. 
    /// </summary>
    /// <param name="entities"></param>
    /// <param name="ct"></param>
    /// <returns></returns>
    ValueTask EventsDispatchedAsync(IEnumerable<IEvent> entities, CancellationToken ct);
}
